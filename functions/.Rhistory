train.data[,2]
train.data$MTKAU0G <- train.data$MTKAU0G + 10
train.data$MTKAU0G
-1 %in% train.data$MTKAU0G
9 %in% train.data$MTKAU0G
train.data$MTKAU0G %in% 9
boxplot(payment_type ~ canceler, data = train.data, ann = FALSE)
boxplot(power_consumption ~ canceler, data = train.data, ann = FALSE)
# Abhängigkeit des Kündigungsverahltens vom jährlichen Stromverbrauch
boxplot(power_consumption ~ canceler, data = train.data, ann = FALSE)
title(xlab = "Kündigung")
title(ylab = "Stromverbrauch (in kWh)")
title(main = "Abhängigkeit des Kündigungsverahltens vom jährlichen Stromverbrauch")
boxplot(HHH ~ canceler, data = train.data, ann = FALSE)
train.data$payment_type
as.factor(train.data$payment_type)
train.data$MTREG0G
as.factor(train.data$MTREG0G)
train.data$MTBON0G
as.factor(train.data$MTBON0G)
train.pred <- cbind(as.factor(train.data$payment_type),
train.data$power_consumption,
as.factor(train.data$MTREG0G),
as.factor(train.data$MTBON0G),
as.factor(train.data$MTALT0G),
as.factor(train.data$MTKLE0G)
)
train.pred <- cbind(as.factor(train.data$payment_type),
train.data$power_consumption,
as.factor(train.data$MTREG0G),
as.factor(train.data$MTBON0G),
as.factor(train.data$MTALT0G),
as.factor(train.data$MTKLE0G))
train.pred
i <- 1
na.value <- which(is.na(train.pred[,i]))
na.value
na.rows <- c(na.rows, na.value)
na.rows <- numeric()
na.rows <- c(na.rows, na.value)
na.rows
i <- 2
na.value <- which(is.na(train.pred[,i]))
na.value
na.rows <- c(na.rows, na.value)
na.rows
i <- 3
na.value <- which(is.na(train.pred[,i]))
na.value
na.rows <- c(na.rows, na.value)
na.rows
i <- 4
na.value <- which(is.na(train.pred[,i]))
na.value
na.rows <- c(na.rows, na.value)
na.rows
# Löschen fehlender Einträge
na.rows <- numeric()
for(i in 1:ncol(train.pred)){
na.value <- which(is.na(train.pred[,i]))
na.rows <- c(na.rows, na.value)
}
na.rows <- unique(na.rows)
na.rows <- sort(na.rows)     # Elemente aufsteigend sortieren
dim(train.pred)
train.pred <- train.pred[-na.rows,]
dim(train.pred)
head(train.pred)
include <- c("payment_type","power_consumption","MTREG0G","MTBON0G","MTALT0G","MTKLE0G")
include
train.data[,colnames(train.data) %in% include]
train.pred <- train.data[,colnames(train.data) %in% include]
dim(train.pred)
head(train.pred)
colnames(train.data)
train.data <- read.table("E:/Mainova/dmc2002/dmc2002/Daten/Daten-DMC2002/data_dmc2002_train.txt", header=T, sep='\t')
dmc.train <- train.data
summary(dmc.train)
dmc.train[,'MTKAU0G'] = dmc.train[,'MTKAU0G'] + 10
# Rest -1 oder 0
c = ncol(dmc.train)-1
for (i in 1:c) {
na.value = which(is.na(dmc.train[,i]))
dmc.train[na.value,i] = 0
}
# Prüfung
head(dmc.train, n=10L)
kat.columns = c(2,6:33)
for (i in kat.columns) {
dmc.train[,i] = as.factor(dmc.train[,i])
}
dmc.train$canceler = as.numeric(dmc.train$canceler)
train.data[1:20,34]
dmc.train$canceler = as.numeric(dmc.train$canceler)
dmc.train[1:20,34]
dmc.train[dmc.train$canceler == 1, 'canceler'] = 0
dmc.train[dmc.train$canceler == 2, 'canceler'] = 1
dmc.train[1:20,34]
summary(dmc.train)
formel.str = paste('canceler','~')
formel.str = paste(formel,paste(colnames(dmc.train[,c(2:33)]), collapse='+'), sep='')
formel.formula = as.formula(formel)
fit = glm(formula=formel.formula, data=dmc.train, family=binomial(link='logit'))
summary(fit)
# Dann können wir rechnen.
formel.str = paste('canceler','~')
formel.str = paste(formel,paste(colnames(dmc.train[,c(2:33)]), collapse='+'), sep='')
formel.str = paste(formel.str,paste(colnames(dmc.train[,c(2:33)]), collapse='+'), sep='')
formel.formula = as.formula(formel.str)
fit = glm(formula=formel.formula, data=dmc.train, family=binomial(link='logit'))
summary(fit)
c = ncol(dmc_train)-1
for (i in 1:c) {
dmc.train[,i] = as.numeric(dmc.train[,i])
}
summary(dmc.train)
fit = glm(formula=formel.formula, data=dmc.train, family=binomial(link='logit'))
summary(fit)
test.data <- read.table("E:/Mainova/dmc2002/dmc2002/Daten/Daten-DMC2002/data_dmc2002_class.txt", header=T, sep='\t')
dmc.class <- test.cata
dmc.class <- test.data
real.data <- read.table("E:/Mainova/dmc2002/dmc2002/Daten/Daten-DMC2002/data_dmc2002_realclass.txt", header=T, sep='\t')
dmc.realclass <- real.data
dmc.class = cbind(dmc.class, dmc.realclass$canceler)
dmc.class
summary(dmc.class)
names = colnames(dmc.class)
names[ncol(dmc.class)] = 'canceler'
colnames(dmc.class) = names
summary(dmc.class)
dmc.class$canceler = as.numeric(dmc.class$canceler)
dmc.class[dmc.class$canceler == 1, 'canceler'] = 0
dmc.class[dmc.class$canceler == 2, 'canceler'] = 1
# MTKAU0G positiv machen
dmc.class[,'MTKAU0G'] = dmc.class[,'MTKAU0G'] + 10
# Rest -1 oder 0
c = ncol(dmc.class)-1
for (i in 1:c) {
na.value = which(is.na(dmc.class[,i]))
dmc.class[na.value,i] = 0
}
summary(dmc.class)
predict(fit, newdata=dmc.class[,c(2:33)], type='response')
pred.prob <- predict(fit, newdata=dmc.class[,c(2:33)], type='response')
library(pROC)
dmc.class$pred.prob = pred.prob
head(dmc.class)
roc.class = roc(canceler ~ pred.prob, data = dmc.class)
plot(roc.class)
summary(fit)
fit
summary(fit)
step(fit)
?step
final <- step(fit)
summary(final)
fit.final <- final
summary(fit.final)
pred.prob <- predict(fit.final, newdata=dmc.class[,c(2:33)], type='response')
dmc.class$pred.prob = pred.prob
roc.class = roc(canceler ~ pred.prob, data = dmc.class)
plot(roc.class)
pred.prob <- predict(fit.final, newdata=dmc.class[,c(2:33)], type='response')
pred.prob
dmc.class$pred.prob = pred.prob
roc.class = roc(canceler ~ pred.prob, data = dmc.class)
plot(roc.class)
? step
rm(list=ls())
train.data <- read.table("E:/Mainova/dmc2002/dmc2002/Daten/Daten-DMC2002/data_dmc2002_train.txt", header=T, sep='\t')
# Spalten sind durch Tabulator voneinander getrennt
# Spalten ohne Werte sind als fehlende Werte zu behandeln
# Einlesen der Trainingsdaten
test.data <- read.table("E:/Mainova/dmc2002/dmc2002/Daten/Daten-DMC2002/data_dmc2002_class.txt", header=T, sep='\t')
real.data <- read.table("E:/Mainova/dmc2002/dmc2002/Daten/Daten-DMC2002/data_dmc2002_realclass.txt", header=T, sep='\t')
dmc.train <- train.data
summary(dmc.train)
# MTKAU0G positiv machen
dmc.train[,'MTKAU0G'] = dmc.train[,'MTKAU0G'] + 10
# Rest -1 oder 0
c = ncol(dmc.train)-1
for (i in 1:c) {
na.value = which(is.na(dmc.train[,i]))
dmc.train[na.value,i] = 0
}
# Prüfung
head(dmc.train, n=10L)
# Setzen der kategorischen Spalten
kat.columns = c(2,6:33)
for (i in kat.columns) {
dmc.train[,i] = as.factor(dmc.train[,i])
}
# Zielmerkmal auf 0/1 setzen
dmc.train$canceler = as.numeric(dmc.train$canceler)
dmc.train[dmc.train$canceler == 1, 'canceler'] = 0
dmc.train[dmc.train$canceler == 2, 'canceler'] = 1
# Prüfung
summary(dmc.train)
# Dann können wir rechnen.
formel.str = paste('canceler','~')
formel.str = paste(formel.str,paste(colnames(dmc.train[,c(2:33)]), collapse='+'), sep='')
formel.formula = as.formula(formel.str)
fit = glm(formula=formel.formula, data=dmc.train, family=binomial(link='logit'))
summary(fit)
# Wir testen das Modell mit numerischen Merkmalen
c = ncol(dmc_train)-1
for (i in 1:c) {
dmc.train[,i] = as.numeric(dmc.train[,i])
}
c = ncol(dmc.train)-1
for (i in 1:c) {
dmc.train[,i] = as.numeric(dmc.train[,i])
}
# Prüfung
summary(dmc.train)
# Regression
fit = glm(formula=formel.formula, data=dmc.train, family=binomial(link='logit'))
summary(fit)
fit.final <- step(fit)
rm(list=ls())
train.data <- read.table("E:/Mainova/dmc2002/dmc2002/Daten/Daten-DMC2002/data_dmc2002_train.txt", header=T, sep='\t')
# Spalten sind durch Tabulator voneinander getrennt
# Spalten ohne Werte sind als fehlende Werte zu behandeln
# Einlesen der Trainingsdaten
test.data <- read.table("E:/Mainova/dmc2002/dmc2002/Daten/Daten-DMC2002/data_dmc2002_class.txt", header=T, sep='\t')
real.data <- read.table("E:/Mainova/dmc2002/dmc2002/Daten/Daten-DMC2002/data_dmc2002_realclass.txt", header=T, sep='\t')
# Betrachtung des Datensatzes
head(train.data)
dmc.train <- train.data
summary(dmc.train)
# fehlende Werte ersetzen
# MTKAU0G positiv durch 0 ersetzen
#na.value = which(is.na(dmc.train[,'MTKAU0G']))
#dmc.train[na.value,'MTKAU0G'] = 0
# MTKAU0G positiv machen
dmc.train[,'MTKAU0G'] = dmc.train[,'MTKAU0G'] + 10
# Rest -1 oder 0
c = ncol(dmc.train)-1
for (i in 1:c) {
na.value = which(is.na(dmc.train[,i]))
dmc.train[na.value,i] = 0
}
# Prüfung
head(dmc.train, n=10L)
# Setzen der kategorischen Spalten
kat.columns = c(2,6:33)
for (i in kat.columns) {
dmc.train[,i] = as.factor(dmc.train[,i])
}
# Zielmerkmal auf 0/1 setzen
dmc.train$canceler = as.numeric(dmc.train$canceler)
dmc.train[dmc.train$canceler == 1, 'canceler'] = 0
dmc.train[dmc.train$canceler == 2, 'canceler'] = 1
# Prüfung
summary(dmc.train)
# Dann können wir rechnen.
formel.str = paste('canceler','~')
formel.str = paste(formel.str,paste(colnames(dmc.train[,c(2:33)]), collapse='+'), sep='')
formel.formula = as.formula(formel.str)
fit = glm(formula=formel.formula, data=dmc.train, family=binomial(link='logit'))
summary(fit)
# Wir testen das Modell mit numerischen Merkmalen
c = ncol(dmc.train)-1
for (i in 1:c) {
dmc.train[,i] = as.numeric(dmc.train[,i])
}
# Prüfung
summary(dmc.train)
# Regression
fit = glm(formula=formel.formula, data=dmc.train, family=binomial(link='logit'))
summary(fit)
fit.final <- step(fit)
?t.test
?read.table
? t.test
qt(0.95, 116)
? cor.test
? anova
? anova.glm
data(mtcars)
head(mtcars)
cbind(mtcars$vs, mtcars$gear)
? mtcars
counts <- table(mtcars$vs, mtcars$gear)
counts
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("darkblue","red"),
legend = rownames(counts))
colors()
counts <- table(mtcars$vs, mtcars$gear)
counts
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("cornflowerblue","coral3"),
legend = rownames(counts))
counts <- table(mtcars$vs, mtcars$gear)
counts
barplot(counts, main="Car Distribution by Gears and VS",
xlab="Number of Gears", col=c("cornflowerblue","darkred"),
legend = rownames(counts))
data(mtcars)
mtcars$mpg
mtcars$cyl
boxplot(mpg~cyl,data=mtcars, main="Car Milage Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon")
bp <- boxplot(mpg~cyl,data=mtcars, main="Car Milage Data",
xlab="Number of Cylinders", ylab="Miles Per Gallon")
bp$stats
lbMenon <- function(n, epsi, prob){
beta <- -logb(prob, base=n)
k <- (16+8*beta)/(epsi^2) * log(n)
return(list(k=k))
}
n = 100
epsi = 1
prob = 0.05
lbMenon(n,epsi,prob)
lbMenon(n,0.5,0.1)
lbMenon(n,0.5,0.2)
lbMenon(n,0.8,0.2)
lbMenon(n,0.9,0.2)
lbMenon(n,0.9,0.25)
lbMenon(n,0.9,0.3)
lbMenon(n,0.9,0.4)
lbMenon(n,0.9,0.5)
lbMenon(n,0.9,0.45)
log(100)/(1^2)
load("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/AJHG/R/Data/Sorbs_high_SNP/w_pheno.RData")
load("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/AJHG/R/Data/Sorbs_high_SNP/w_geno.RData")
w_pheno_PLS_RP <- w_pheno
w_geno_PLS_RP <- w_geno
load("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/AJHG/R/Data/Sorbs_high_SNP/w_pheno_R1.RData")
load("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/AJHG/R/Data/Sorbs_high_SNP/w_geno_R1.RData")
load("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/AJHG/R/Data/Sorbs_high_SNP/w_pheno_R2.RData")
load("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/AJHG/R/Data/Sorbs_high_SNP/w_geno_R2.RData")
load("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/AJHG/R/Data/Sorbs_high_SNP/w_pheno_R3.RData")
load("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/AJHG/R/Data/Sorbs_high_SNP/w_geno_R3.RData")
load("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/AJHG/R/Data/Sorbs_high_SNP/w_pheno_R4.RData")
load("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/AJHG/R/Data/Sorbs_high_SNP/w_geno_R4.RData")
load("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/AJHG/R/Data/Sorbs_high_SNP/w_pheno_R5.RData")
load("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/AJHG/R/Data/Sorbs_high_SNP/w_geno_R5.RData")
load("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/AJHG/R/Data/Sorbs_high_SNP/w_pheno_R6.RData")
load("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/AJHG/R/Data/Sorbs_high_SNP/w_geno_R6.RData")
load("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/AJHG/R/Data/Sorbs_high_SNP/w_pheno_R7.RData")
load("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/AJHG/R/Data/Sorbs_high_SNP/w_geno_R7.RData")
load("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/AJHG/R/Data/Sorbs_high_SNP/w_pheno_R8.RData")
load("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/AJHG/R/Data/Sorbs_high_SNP/w_geno_R8.RData")
load("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/AJHG/R/Data/Sorbs_high_SNP/w_pheno_R9.RData")
load("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/AJHG/R/Data/Sorbs_high_SNP/w_geno_R9.RData")
load("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/AJHG/R/Data/Sorbs_high_SNP/w_pheno_R10.RData")
load("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/AJHG/R/Data/Sorbs_high_SNP/w_geno_R10.RData")
w_pheno_R <- cbind(w_pheno_R1, w_pheno_R2, w_pheno_R3, w_pheno_R4, w_pheno_R5, w_pheno_R6, w_pheno_R7, w_pheno_R8, w_pheno_R9, w_pheno_R10)
dim(w_pheno_R)
w_geno_R <- cbind(w_geno_R1, w_geno_R2, w_geno_R3, w_geno_R4, w_geno_R5, w_geno_R6, w_geno_R7, w_geno_R8, w_geno_R9, w_geno_R10)
dim(w_geno_R)
var_pheno <- apply(w_pheno_R, 1, var)
length(var_pheno)
var_pheno <- apply(w_pheno_R, 1, var)
length(var_pheno)
var_geno <- apply(w_geno_R, 1, var)
length(var_geno)
mean(var_pheno)   # [1] 7.931181e-08
mean(var_geno)   # [1] 0.0007765472
sd(var_pheno)     # [1] 5.583872e-08
sd(var_geno)     # [1] 0.0003840039
w_pheno_PLS_RP
w_pheno_PLS_RP[1,1]
mean(w_pheno_PLS_RP[2:3,1])
var_pheno
var_pheno[1]
mean(var_pheno[2:3])
sd(var_pheno[2:3])
which.max(var_geno)   # 24
which.min(var_geno)   # 8
which(rownames(w_geno_PLS_RP) == 'rs11621467')
which(rownames(w_geno_PLS_RP) == 'rs4905203')   # 287022
which(rownames(w_geno_PLS_RP) == 'rs1956713')   # 287022
which(rownames(w_geno_PLS_RP) == 'rs6575436')   # 287022
which(rownames(w_geno_PLS_RP) == 'rs11160190')   # 287022
rgeno >- c(287022,287024,287028,287046,287061)
rgeno <- c(287022,287024,287028,287046,287061)
w_geno_PLS_RP[308665]
mean(w_geno_PLS_RP[rgeno])
w_geno_PLS_RP[50805]
var_geno[308665]
mean(var_geno[rgeno])
sd(var_geno[rgeno])
var_geno[50805]
corpheno <- cor(w_pheno_PLS_RP[,1], w_pheno_R)
fdrpheno <- fdrtool(corpheno[1,], statistic="correlation", plot=TRUE, color.figure=TRUE, verbose=TRUE)
fdrpheno$lfdr
library(fdrtool)
corpheno <- cor(w_pheno_PLS_RP[,1], w_pheno_R)
fdrpheno <- fdrtool(corpheno[1,], statistic="correlation", plot=TRUE, color.figure=TRUE, verbose=TRUE)
fdrpheno$lfdr
corgeno <- cor(w_geno_PLS_RP[,1], w_geno_R)
fdrgeno <- fdrtool(corgeno[1,], statistic="correlation", plot=TRUE, color.figure=TRUE, verbose=TRUE)
fdrgeno$lfdr
x <- c(9.0,9.1,8.9,8.7,8.9,9.0,9.1)
mean(x)
sd(x)
x <- c(0.9,0.91,0.89,0.87,0.89,0.90,0.91)
mean(x)
sd(x)
x <- c(0.009,0.0091,0.0089,0.0087,0.0089,0.0090,0.0091)
mean(x)
sd(x)
lerntab <- read.table("E:/HHK/Lerntabelle2_dummies.csv", header=T, sep=';')
head(lerntab)
summary(lerntab)
VarInfl <- VIF(lerntab[,3:46])
install.packages("fmsb")
library(fmsb)
VarInfl <- VIF(lerntab[,3:46])
load("E:/HHK/finalmodel_allValues_dummies_noCollin.RData")
VarInfl <- VIF(mod.final)
VarInfl
summary(VarInfl)
VIF(mod.final)
summary(mod.final)
res <- lm(Ozone ~ Wind+Temp+Solar.R, data=airquality)
res
VIF(lm(Wind ~ Temp+Solar.R, data=airquality))
library(car)
vif(mod.final)
VarInfl <- vif(mod.final)
print(VarInfl)
library(far)
library(proxy)
filenameX1 <- "C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/Frontiers/PlscRP/RP_phenotype/ExampleData_1000voxel/X1.RData"
# SNP data (genotype data)
filenameX2 <- "C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/Frontiers/PlscRP/RP_phenotype/ExampleData_1000voxel/X2.RData"
# ID of causal voxel
filenameID_causalX1 <- "C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/Frontiers/PlscRP/RP_phenotype/ExampleData_1000voxel/IDcausalX1.RData"
# ID of voxels collinear to the causal voxel (r>=0.8)
filenameID_collinearX1 <- "C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/Frontiers/PlscRP/RP_phenotype/ExampleData_1000voxel/IDcollinearX1.RData"
# ID of causal SNPs
filenameID_causalX2 <- "C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/Frontiers/PlscRP/RP_phenotype/ExampleData_1000voxel/IDcausalX2.RData"
# insert filename of results here
filenameRes <- "C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/Frontiers/PlscRP/RP_phenotype/ExampleData_1000voxel/"
# orthogonalization of random matrix using Gram-Schmidt algorithm
orthonorm <- TRUE
nperms <- 1
setwd("C:/Users/cgrellmann/Documents/Privat/Promotion/Paper/Frontiers/PlscRP/functions")
source("Menon_lowerBound.R")
source("PLSC.R")
source("Out_of_sample_cov.R")
source("Similarity.R")
load(filenameX1)               # fMRI data (phenotype data)
load(filenameX2)               # SNP data (genotype data)
load(filenameID_causalX1)      # ID of causal voxel
load(filenameID_collinearX1)   # ID of voxels collinear to the causal voxel (r>=0.8)
load(filenameID_causalX2)      # ID of causal SNPs
N <- nrow(X1)
D1 <- ncol(X1)
D2 <- ncol(X2)
print("Dimensionality of example data")
print("==============================")
print(paste("Sample size:", N))
print(paste("Number of voxels:", D1))
print(paste("Number of SNPs:", D2))
X1.zscore <- scale(X1, center=TRUE, scale=TRUE)
X2.zscore <- scale(X2, center=TRUE, scale=TRUE)
rX1X2 <- cor(X1.zscore, X2.zscore)
X1.RP <- X1.zscore
comp <- 1        # component for which permutation test should be performed
perm.PLSC_RP <- PLSC.permute(X1.RP, X2.zscore, nperms, comp)
print("Permutation test for PLSC-RP")
print("============================")
print(paste("Covariance of latent variables:", perm.PLSC_RP$cov))
print(paste("p-value of covariance:", perm.PLSC_RP$pval_cov))
out.PLSC_RP <- PLSC(X1.RP, X2.zscore)
w_X1.RP <- out.PLSC_RP$A
w_X2 <- out.PLSC_RP$B
LVX1.RP <- out.PLSC_RP$LV_X
LVX2 <- out.PLSC_RP$LV_Y
covval <- out.PLSC_RP$d
totalVar <- out.PLSC_RP$totalVar
varsum <- numeric(length(totalVar))
for(i in 1:length(totalVar)){
varsum[i] <- sum(totalVar[1:i])
}
sel <- which(varsum >= 80)
sel <- sel[1]
w_X1.RP <- w_X1.RP[,1:sel]
w_X2 <- w_X2[,1:sel]
LVX1.RP <- LVX1.RP[,1:sel]
LVX2 <- LVX2[,1:sel]
covval <- covval[1:sel]
print("Results of PLSC-RP")
print("==================")
print(paste("Number of components:", sel))
print(paste("Variance explained:", sum(totalVar[1:sel])))
print(paste("Covariance of latent variables:", covval))
cov_oos_PLSC_RP <- Cov_oos_CV(X1.RP, X2.zscore, sel)
cov_oos_mean <- cov_oos_PLSC_RP$cov_oos_mean
causalComp <- which.max(diff(cov_oos_mean))
raw_cov_oos <- diff(cov_oos_mean)
print("Out-of-sample covariance using 10-fold CV")
print("=========================================")
print(paste("Causal Component:", causalComp))
print(paste("Out-of-sample covariance of causal component:", raw_cov_oos[causalComp]))
covval <- covval[1]
w_X2 <- w_X2[,1]
w_X2 <- matrix(w_X2)
LVX2 <- LVX2[,1]
LVX2 <- matrix(LVX2)
w_X1 <- (1/(covval * sum(w_X2^2))) * rX1X2 %*% w_X2
colnorm <- sqrt(sum(w_X1^2))
w_X1 <- (1/colnorm) * w_X1
LVX1 <- LVX1.RP[,1]
LVX1 <- matrix(LVX1)
cor(w_X1, w_X1.RP[,1])
